{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-kka"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/stg_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesDb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkSchemaName": {
						"type": "string",
						"defaultValue": "stg"
					},
					"SinkTableName": {
						"type": "string",
						"defaultValue": "credits"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SinkSchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_onlinepurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6LocalTicketsToStaging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyTicketsData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetLastWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.Tickets where TransactionDt > '@{activity('GetLastWatermark').output.firstRow.WatermarkValue}' and TransactionDt <= '@{activity('NewWatermark').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.cinema_tickets",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"movie_id"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode"
										},
										"sink": {
											"name": "cinema_code"
										}
									},
									{
										"source": {
											"name": "CinemaName"
										},
										"sink": {
											"name": "cinema_name"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"precision": 10
										},
										"sink": {
											"name": "movie_id",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"precision": 10
										},
										"sink": {
											"name": "ticket_count",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId"
										},
										"sink": {
											"name": "transaction_id"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"scale": 3,
											"precision": 23
										},
										"sink": {
											"name": "transaction_date",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceLocalTicketsDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LocalWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "NewWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(TransactionDt) as NewWatermarkvalue from dbo.Tickets",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceLocalTicketsDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyTicketsData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('NewWatermark').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('GetLastWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LocalDbCinemaTickets",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadTOtCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyTicketsData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[load_data_to_dbo_tCinema]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadTOtCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadTOtCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[load_data_to_dbo_tCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-01T11:37:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_cinema_tickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/7Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyOnlineData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.LastWatermark",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.StartDate",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"path": "$['serviceName']"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"path": "$['serviceCode']"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"path": "$['movieId']"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "$['userId']"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"path": "$['price']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"path": "$['transaction']['id']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"path": "$['transaction']['datetime']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "sourceOnlineJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sinkOnlineJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyOnlineData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@addToTime(pipeline().parameters.StartDate, -2, 'Hour')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LocalDbCinemaTickets",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LastWatermark": {
						"type": "string",
						"defaultValue": null
					},
					"StartDate": {
						"type": "string",
						"defaultValue": null
					},
					"TableName": {
						"type": "string",
						"defaultValue": null
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-04T14:23:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7OnlineBlobToAdls2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetLastWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * \nfrom dbo.watermarktable\nwhere TableName = 'OnlineMentoring';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LocalWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyOnlineData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{activity('GetLastWatermark').output.firstRow.WatermarkValue}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@variables('StartTime')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"path": "$['serviceName']"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"path": "$['serviceCode']"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"path": "$['movieId']"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "$['userId']"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"path": "$['price']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"path": "$['transaction']['id']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"path": "$['transaction']['datetime']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "sourceOnlineJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sinkOnlineJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyOnlineData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@addToTime(variables('StartTime'), -2, 'Hour')\n",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('GetLastWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LocalDbCinemaTickets",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T13:43:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7_3_JsonToStgOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StgOnlinePurchace",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.online_purchase",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "sinkOnlineJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_onlinepurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PopulateOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "StgOnlinePurchace",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[populate_dbo_tOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateOnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[populate_dbo_tOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-04T14:58:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_onlinepurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_1_Lookup_Parametrized')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SelectValues",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select container_name, folder_name, file_name, column_delimiter, row_delimiter, encoding, escape_character, quote_character, schema_name, table_name, DIU_value, mapping from [etl].[tControlMetadata]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Metadata_table",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SelectValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SelectValues').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "RawMetadataToDb",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().schema_name}.@{item().table_name};",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().DIU_value",
											"type": "Expression"
										},
										"translator": {
											"value": "@item().mapping",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "9_SourceAdlsMetadataDriven",
											"type": "DatasetReference",
											"parameters": {
												"Column_Delimiter": {
													"value": "@item().column_delimiter",
													"type": "Expression"
												},
												"SourceContainer": {
													"value": "@item().container_name",
													"type": "Expression"
												},
												"SourceFolder": {
													"value": "@item().folder_name",
													"type": "Expression"
												},
												"SoucreFileName": {
													"value": "@item().file_name",
													"type": "Expression"
												},
												"Row_Delimiter": {
													"value": "@item().row_delimiter",
													"type": "Expression"
												},
												"Encoding": {
													"value": "@item().encoding",
													"type": "Expression"
												},
												"Escape_character": {
													"value": "@item().escape_character",
													"type": "Expression"
												},
												"Quote_character": {
													"value": "@item().quote_character",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "stg_credits",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchemaName": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"SinkTableName": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SuccessfullRun",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "RawMetadataToDb",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[load_logging_info_proc]",
										"storedProcedureParameters": {
											"json": {
												"value": {
													"value": "@string(activity('RawMetadataToDb').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"runId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "MoviesDb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "FailedRun",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "RawMetadataToDb",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[load_error_info_proc]",
										"storedProcedureParameters": {
											"json": {
												"value": {
													"value": "@string(activity('RawMetadataToDb').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"runId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "MoviesDb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-18T09:22:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "task 9",
				"activities": [
					{
						"name": "ACT_COPY_metadata_driven_approach",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": {
									"type": "Expression",
									"value": "@json(string(pipeline().parameters.p_additional_columns)).additionalColumns"
								},
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.p_subfolder",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.p_wildcard",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE @{pipeline().parameters.p_schema_name}.@{pipeline().parameters.p_table_name};\nselect 1",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": {
								"value": "@pipeline().parameters.p_DIU",
								"type": "Expression"
							},
							"translator": {
								"value": "@pipeline().parameters.p_mapping",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "9_ParametrizedSource_copy1",
								"type": "DatasetReference",
								"parameters": {
									"p_input_file_name": {
										"value": "@pipeline().parameters.p_input_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_SP_LOG",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_COPY_metadata_driven_approach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_log]",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@string(activity('ACT_COPY_metadata_driven_approach').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Var_ERR",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_COPY_metadata_driven_approach",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "err",
							"value": {
								"value": "@string(\n json(\n replace(\n string(activity('ACT_COPY_metadata_driven_approach').Error),\n '''',\n ''''''\n )\n )\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_SP_LOG_ERROR",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set_Var_ERR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.usp_log_error",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@variables('err')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_input_file_name": {
						"type": "string",
						"defaultValue": "credits.csv"
					},
					"p_col_delimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"p_row_delimiter": {
						"type": "string",
						"defaultValue": "\\r\\n"
					},
					"p_encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					},
					"p_escape_character": {
						"type": "string",
						"defaultValue": "\""
					},
					"p_schema_name": {
						"type": "string",
						"defaultValue": "stg"
					},
					"p_table_name": {
						"type": "string",
						"defaultValue": "credits"
					},
					"p_mapping": {
						"type": "string",
						"defaultValue": " \"translator\": { \"type\": \"TabularTranslator\", \"mappings\": [{ \"source\": { \"name\": \"userId\", \"type\": \"String\", \"physicalType\": \"String\" }, \"sink\": { \"name\": \"user_id\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } }, { \"source\": { \"name\": \"movieId\", \"type\": \"String\", \"physicalType\": \"String\" }, \"sink\": { \"name\": \"movie_id\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } }, { \"source\": { \"name\": \"rating\", \"type\": \"String\", \"physicalType\": \"String\" }, \"sink\": { \"name\": \"rating\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } }, { \"source\": { \"name\": \"timestamp\", \"type\": \"String\", \"physicalType\": \"String\" }, \"sink\": { \"name\": \"timestamp\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } }, { \"source\": { \"name\": \"pipelineId\", \"type\": \"String\" }, \"sink\": { \"name\": \"pipelineId\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } }, { \"source\": { \"name\": \"source_filename\", \"type\": \"String\" }, \"sink\": { \"name\": \"source_filename\", \"type\": \"String\", \"physicalType\": \"nvarchar\" } } ], \"typeConversion\": true, \"typeConversionSettings\": { \"allowDataTruncation\": true, \"treatBooleanAsNumber\": false } }"
					},
					"p_DIU": {
						"type": "int",
						"defaultValue": 0
					},
					"p_subfolder": {
						"type": "string",
						"defaultValue": "metadata-driven"
					},
					"p_wildcard": {
						"type": "string",
						"defaultValue": "credits*"
					},
					"p_additional_columns": {
						"type": "string",
						"defaultValue": {
							"additionalColumns": [
								{
									"name": "pipelineId",
									"value": "..."
								},
								{
									"name": "source_filename",
									"value": "$$FILEPATH"
								}
							],
							"skipLineCount": 0,
							"recursive": true,
							"enablePartitionDiscovery": false,
							"wildcardFileName": "credits*"
						}
					}
				},
				"variables": {
					"err": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T10:36:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_Parametrized_toStg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawMetadataToDb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE @{pipeline().parameters.SinkSchemaName}.@{pipeline().parameters.SinkTableName};",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "user_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movie_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "9_SourceAdlsMetadataDriven",
								"type": "DatasetReference",
								"parameters": {
									"Column_Delimiter": {
										"value": "@pipeline().parameters.Column_Delimiter",
										"type": "Expression"
									},
									"SourceContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"SourceFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"SoucreFileName": {
										"value": "@pipeline().parameters.SoucreFileName",
										"type": "Expression"
									},
									"Row_Delimiter": {
										"value": "@pipeline().parameters.Row_Delimiter",
										"type": "Expression"
									},
									"Encoding": {
										"value": "@pipeline().parameters.Encoding",
										"type": "Expression"
									},
									"Escape_character": {
										"value": "@pipeline().parameters.Escape_character",
										"type": "Expression"
									},
									"Quote_character": {
										"value": "@pipeline().parameters.Quote_character",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_credits",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchemaName": {
										"value": "@pipeline().parameters.SinkSchemaName",
										"type": "Expression"
									},
									"SinkTableName": {
										"value": "@pipeline().parameters.SinkTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SuccessfullRun",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RawMetadataToDb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[load_logging_info_proc]",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@string(activity('RawMetadataToDb').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailedRun",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RawMetadataToDb",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[load_error_info_proc]",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@string(activity('RawMetadataToDb').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SinkSchemaName": {
						"type": "string",
						"defaultValue": "stg"
					},
					"SinkTableName": {
						"type": "string",
						"defaultValue": "credits"
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "metadata-driven"
					},
					"SoucreFileName": {
						"type": "string",
						"defaultValue": "credits.csv"
					},
					"Column_Delimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"Row_Delimiter": {
						"type": "string",
						"defaultValue": "\\r\\n"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					},
					"Escape_character": {
						"type": "string",
						"defaultValue": "\""
					},
					"Quote_character": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T10:38:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromAustraliaToFrance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromAuBlobToFrDataLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AustraliaSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-07T13:20:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyMoviesToDb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawCreditsToDb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.credits",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "9_ParametrizedSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "RawMetadataToDb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.movies_metadata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "9_ParametrizedSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "9_ParametrizedSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "RawRatingsToDb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings_part*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.ratings",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "9_ParametrizedSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stg_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "spPopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RawCreditsToDb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateCast",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateTcompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RawMetadataToDb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateTcompany",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateMovieStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateGenre",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulatetMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateMovies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulatetMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulatetMoviesCompanyMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulatetRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RawRatingsToDb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "MoviesDb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T10:36:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stg_credits')]",
				"[concat(variables('factoryId'), '/datasets/stg_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8_1_DataMartDims')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDboTonlineService",
								"type": "DatasetReference"
							},
							"name": "MoviesDboOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDboTmovies",
								"type": "DatasetReference"
							},
							"name": "MoviesDboMovies"
						},
						{
							"dataset": {
								"referenceName": "MovieDboMovieStatus",
								"type": "DatasetReference"
							},
							"name": "MovieStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartMovie"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "UpdateRowSink"
						}
					],
					"transformations": [
						{
							"name": "CreatedAndModifiedDatePopulation",
							"description": "Updating column CreatedDate and ModifiedDate"
						},
						{
							"name": "JoinMovieStatus"
						},
						{
							"name": "CreatedAndModifiedDates",
							"description": "Updating CteatedDate and ModifiedDate columns with current timestamp"
						},
						{
							"name": "ConditionUpdateRow"
						},
						{
							"name": "CreatedDateCurrent"
						},
						{
							"name": "DropDates"
						},
						{
							"name": "AddNewRows"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDboOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDboMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MovieStatus",
						"MoviesDboOnlineService derive(ModifiedDate = fromUTC(currentUTC(), 'FLE Standard Time')) ~> CreatedAndModifiedDatePopulation",
						"MoviesDboMovies, MovieStatus join(MoviesDboMovies@MovieStatusId == MovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMovieStatus",
						"JoinMovieStatus derive(CreatedDateCurrent = fromUTC(currentUTC(), 'FLE Standard Time'),",
						"          ModifiedDateCurrent = fromUTC(currentUTC(), 'FLE Standard Time')) ~> CreatedAndModifiedDates",
						"CreatedAndModifiedDatePopulation split(isUpsert(),",
						"     disjoint: false) ~> ConditionUpdateRow@(UpdateRow, NewRow)",
						"ConditionUpdateRow@NewRow derive(CreatedDate = case(ServiceId!=1, fromUTC(currentUTC(), 'FLE Standard Time'), toTimestamp('2023-03-31 15:53:58.637'))) ~> CreatedDateCurrent",
						"ConditionUpdateRow@UpdateRow select(mapColumn(",
						"          ServiceCode,",
						"          ServiceName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropDates",
						"DropDates, CreatedDateCurrent union(byName: true)~> AddNewRows",
						"AddNewRows alterRow(upsertIf(true())) ~> alterRow1",
						"CreatedAndModifiedDates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = CreatedDateCurrent,",
						"          ModifiedDate = ModifiedDateCurrent",
						"     )) ~> DataMartMovie",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ServiceCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> UpdateRowSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/8_3_DataMartFacts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesTonlinePurchase",
								"type": "DatasetReference"
							},
							"name": "MoviesTonlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DataMartDimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesTonlinePurchase",
								"type": "DatasetReference"
							},
							"name": "MovieOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMartFactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMartFactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "JoinDimAndMovies"
						},
						{
							"name": "MonthKey",
							"description": "Create MonthKey as integer"
						},
						{
							"name": "PurchaseAmount"
						},
						{
							"name": "JoinServiceKey"
						},
						{
							"name": "JoinMovieKey"
						},
						{
							"name": "DateKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesTonlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimOnlineService",
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MovieOnlinePurchase",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartMovies",
						"MoviesTonlinePurchase, DataMartDimOnlineService join(ServiceId == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDimAndMovies",
						"JoinDimAndMovies derive(MonthKey = toInteger(translate(substringIndex(toString(TransactionDate), ' ', 1), '-', ''))) ~> MonthKey",
						"MonthKey aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> PurchaseAmount",
						"MovieOnlinePurchase, DataMartDimOnlineService join(ServiceId == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinServiceKey",
						"JoinServiceKey, DataMartMovies join(MovieId == MovieKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMovieKey",
						"JoinMovieKey derive(DateKey = toInteger(translate(substringIndex(toString(TransactionDate), ' ', 1), '-', ''))) ~> DateKey",
						"PurchaseAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot",
						"DateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceId,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7_3_MasterOnlineStreaming')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OnlineBlobToAdls",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7OnlineBlobToAdls2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataLakeToStg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OnlineBlobToAdls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7_3_JsonToStgOnlinePurchase",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ArchiveDL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataLakeToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ArchiveOnlineAdls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-10T18:57:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/7OnlineBlobToAdls2')]",
				"[concat(variables('factoryId'), '/pipelines/7_3_JsonToStgOnlinePurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8_DataFlowDimAndFact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateDataMartDims",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "8_1_DataMartDims",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDboOnlineService": {},
									"MoviesDboMovies": {},
									"MovieStatus": {},
									"DataMartMovie": {},
									"UpdateRowSink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DataMartFactTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PopulateDataMartDims",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "8_3_DataMartFacts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesTonlinePurchase": {},
									"DataMartDimOnlineService": {},
									"MovieOnlinePurchase": {},
									"DataMartMovies": {},
									"FactOnlinePurchaseMonthlySnapshot": {},
									"FactOnlinePurchase": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-30T10:08:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/8_1_DataMartDims')]",
				"[concat(variables('factoryId'), '/dataflows/8_3_DataMartFacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterPipelineETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteBlobToDL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromBlobToDataLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteArchiving",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ArchiveProcessedFilesLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteETL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteBlobToDL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyMoviesToDb",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-16T11:08:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyMoviesToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyTriggerLocalDbToMovies')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "6LocalTicketsToStaging",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-27T12:01:00",
						"endTime": "2023-02-28T12:01:00",
						"timeZone": "FLE Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/6LocalTicketsToStaging')]"
			]
		}
	]
}