{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-kka"
		},
		"MasterDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MasterDB'"
		},
		"azurementoringdatalakeka_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakekk.dfs.core.windows.net"
		},
		"mentoring_key_vault_ka_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-kka.vault.azure.net/"
		},
		"DataMartDB_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "DataMartAccess"
		},
		"LocalDbCinemaTickets_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "localdbcinematickets"
		},
		"MoviesDb_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "moviesDbEtlUser"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/10_Always_Fail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iAlwaysFail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Internal Server Error",
							"errorCode": "500"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [
					"Transform"
				],
				"lastPublishTime": "2023-04-24T10:00:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_git_brand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iAlwaysFail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Internal Server Error",
							"errorCode": "500"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('MasterDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringdatalakeka')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('azurementoringdatalakeka_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_key_vault_ka')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('mentoring_key_vault_ka_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR6Module')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_Logic_Apps_Email_Notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetErrorMessage",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.URI",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\",\n    \"status\" : \"@{variables('Status')}\",\n    \"error\" : \"@{variables('ErrorMessage')}\"\n   }",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ExecuteAnotherPipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "10_Always_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "SetErrorMessage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ExecuteAnotherPipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorMessage",
							"value": {
								"value": "@if(equals(empty(activity('ExecuteAnotherPipeline').error?.message), true), 'No errors', activity('ExecuteAnotherPipeline').error.message)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetStatus",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ExecuteAnotherPipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Status",
							"value": {
								"value": "@if(equals(activity('ExecuteAnotherPipeline').Status,'Succeeded'), 'Succeeded', 'Failed')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetURLforEmail",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "URLforEmail",
							"value": {
								"value": "@activity('Web').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SetURLforEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@variables('URLforEmail')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" : \"This is a message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\",\n    \"status\" : \"@{variables('Status')}\",\n    \"error\" : \"@{variables('ErrorMessage')}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"URI": {
						"type": "string",
						"defaultValue": "https://mentoring-key-vault-kka.vault.azure.net/secrets/LogicAppsEndpoint/1ff4d920c55c48c4a5d9bc8af7262755?api-version=7.0"
					},
					"receiver": {
						"type": "string",
						"defaultValue": "kateryna_aleksieieva@epam.com"
					}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String",
						"defaultValue": "None"
					},
					"Status": {
						"type": "String"
					},
					"URLforEmail": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-05T12:50:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/10_Always_Fail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_ParametrizedSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "metadata-driven"
					},
					"SourceFileName": {
						"type": "string",
						"defaultValue": "credits.csv"
					},
					"Column_Delimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"Row_Delimiter": {
						"type": "string",
						"defaultValue": "\\n"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					},
					"Escape_character": {
						"type": "string",
						"defaultValue": "\""
					},
					"Quote_character": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "credits.csv",
							"type": "Expression"
						},
						"folderPath": {
							"value": "metadata-driven",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "raw",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_ParametrizedSource_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_input_file_name": {
						"type": "string",
						"defaultValue": "credits*"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_input_file_name",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_SourceAdlsMetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Column_Delimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "metadata-driven"
					},
					"SoucreFileName": {
						"type": "string",
						"defaultValue": "credits.csv"
					},
					"Row_Delimiter": {
						"type": "string",
						"defaultValue": "\\r\\n"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					},
					"Escape_character": {
						"type": "string",
						"defaultValue": "\""
					},
					"Quote_character": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().SoucreFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SourceFolder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Column_Delimiter",
						"type": "Expression"
					},
					"rowDelimiter": {
						"value": "@dataset().Row_Delimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().Encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().Escape_character",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().Quote_character",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "metadata-driven",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkOnlineJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakeka",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "online"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakeka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMartDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_key_vault_ka",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('DataMartDB_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_key_vault_ka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocalDbCinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_key_vault_ka",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LocalDbCinemaTickets_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIR6Module",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR6Module')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_key_vault_ka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_key_vault_ka",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('MoviesDb_properties_typeProperties_connectionString_secretName')]",
						"secretVersion": "d983001dace9462abfb95d694f586f53"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_key_vault_ka')]"
			]
		}
	]
}